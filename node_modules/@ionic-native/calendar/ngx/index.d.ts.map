{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\r\nexport interface CalendarOptions {\r\n    /**\r\n     * Id\r\n     */\r\n    id?: string;\r\n    /**\r\n     *\r\n     */\r\n    firstReminderMinutes?: number;\r\n    /**\r\n     *\r\n     */\r\n    secondReminderMinutes?: number;\r\n    /**\r\n     * Recurrence. Can be set to `daily`, `weekly`, `monthly` or `yearly`\r\n     */\r\n    recurrence?: string;\r\n    /**\r\n     * Recurrence interval. Valid only when `recurrence` option is set.\r\n     */\r\n    recurrenceInterval?: number;\r\n    /**\r\n     * Recurrence end date. Valid only when `recurrence` option is set.\r\n     */\r\n    recurrenceEndDate?: Date;\r\n    /**\r\n     * Calendar name. Ths is supported by `iOS` only.\r\n     */\r\n    calendarName?: string;\r\n    /**\r\n     * Calendar id\r\n     */\r\n    calendarId?: number;\r\n    /**\r\n     * URL\r\n     */\r\n    url?: string;\r\n}\r\nexport interface NameOrOptions {\r\n    /** Calendar name */\r\n    calendarName?: string;\r\n    /** Calendar color as a HEX string */\r\n    calendarColor?: string;\r\n}\r\n/**\r\n * @name Calendar\r\n * @premier calendar\r\n * @description\r\n * This plugin allows you to add events to the Calendar of the mobile device.\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).\r\n *\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Calendar } from '@ionic-native/calendar/ngx';\r\n *\r\n * constructor(private calendar: Calendar) { }\r\n *\r\n *\r\n * this.calendar.createCalendar('MyCalendar').then(\r\n *   (msg) => { console.log(msg); },\r\n *   (err) => { console.log(err); }\r\n * );\r\n * ```\r\n * @interfaces\r\n * CalendarOptions\r\n * NameOrOptions\r\n */\r\nexport declare class Calendar extends IonicNativePlugin {\r\n    /**\r\n     * This function checks if we have permission to read/write from/to the calendar.\r\n     * The promise will resolve with `true` when:\r\n     * - You're running on iOS, or\r\n     * - You're targeting API level lower than 23, or\r\n     * - You're using Android < 6, or\r\n     * - You've already granted permission\r\n     *\r\n     * If this returns false, you should call the `requestReadWritePermission` function\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    hasReadWritePermission(): Promise<boolean>;\r\n    /**\r\n     * Check if we have read permission\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    hasReadPermission(): Promise<boolean>;\r\n    /**\r\n     * Check if we have write permission\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    hasWritePermission(): Promise<boolean>;\r\n    /**\r\n     * Request write permission\r\n     * @returns {Promise<any>}\r\n     */\r\n    requestWritePermission(): Promise<any>;\r\n    /**\r\n     * Request read permission\r\n     * @returns {Promise<any>}\r\n     */\r\n    requestReadPermission(): Promise<any>;\r\n    /**\r\n     * Requests read/write permissions\r\n     * @returns {Promise<any>}\r\n     */\r\n    requestReadWritePermission(): Promise<any>;\r\n    /**\r\n     * Create a calendar. (iOS only)\r\n     *\r\n     * @param {string | NameOrOptions} nameOrOptions  either a string name or a options object. If string, provide the calendar name. IF an object, provide a calendar name as a string and a calendar color in hex format as a string\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createCalendar(nameOrOptions: string | NameOrOptions): Promise<any>;\r\n    /**\r\n     * Delete a calendar. (iOS only)\r\n     * @param {string} name  Name of the calendar to delete.\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    deleteCalendar(name: string): Promise<any>;\r\n    /**\r\n     * Returns the default calendar options.\r\n     *\r\n     * @return {CalendarOptions} Returns an object with the default calendar options\r\n     */\r\n    getCalendarOptions(): CalendarOptions;\r\n    /**\r\n     * Returns options for a custom calender with specific color\r\n     *\r\n     * @return {NameOrOptions} Returns an object with the default options\r\n     */\r\n    getCreateCalendarOptions(): NameOrOptions;\r\n    /**\r\n     * Silently create an event.\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;\r\n    /**\r\n     * Silently create an event with additional options.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any>;\r\n    /**\r\n     * Interactively create an event.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @returns {Promise<any>} Returns a Promise\r\n     */\r\n    createEventInteractively(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;\r\n    /**\r\n     * Interactively create an event with additional options.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n     * @returns {Promise<any>}\r\n     */\r\n    createEventInteractivelyWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any>;\r\n    /**\r\n     * Find an event.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @returns {Promise<any>}\r\n     */\r\n    findEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;\r\n    /**\r\n     * Find an event with additional options.\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the event, or rejects with an error.\r\n     */\r\n    findEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any>;\r\n    /**\r\n     * Find a list of events within the specified date range. (Android only)\r\n     *\r\n     * @param {Date} [startDate]  The start date\r\n     * @param {Date} [endDate]  The end date\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\r\n     */\r\n    listEventsInRange(startDate: Date, endDate: Date): Promise<any>;\r\n    /**\r\n     * Get a list of all calendars.\r\n     * @returns {Promise<any>} A Promise that resolves with the list of calendars, or rejects with an error.\r\n     */\r\n    listCalendars(): Promise<any>;\r\n    /**\r\n     * Get a list of all future events in the specified calendar. (iOS only)\r\n     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\r\n     */\r\n    findAllEventsInNamedCalendar(calendarName: string): Promise<any>;\r\n    /**\r\n     * Modify an event. (iOS only)\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {string} [newTitle]  The new event title\r\n     * @param {string} [newLocation]  The new event location\r\n     * @param {string} [newNotes]  The new event notes\r\n     * @param {Date} [newStartDate]  The new event start date\r\n     * @param {Date} [newEndDate]  The new event end date\r\n     * @return Returns a Promise\r\n     */\r\n    modifyEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, newTitle?: string, newLocation?: string, newNotes?: string, newStartDate?: Date, newEndDate?: Date): Promise<any>;\r\n    /**\r\n     * Modify an event with additional options. (iOS only)\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {string} [newTitle]  The new event title\r\n     * @param {string} [newLocation]  The new event location\r\n     * @param {string} [newNotes]  The new event notes\r\n     * @param {Date} [newStartDate]  The new event start date\r\n     * @param {Date} [newEndDate]  The new event end date\r\n     * @param {CalendarOptions} [filterOptions] Event Options, see `getCalendarOptions`\r\n     * @param {CalendarOptions} [newOptions]  New event options, see `getCalendarOptions`\r\n     * @return Returns a Promise\r\n     */\r\n    modifyEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, newTitle?: string, newLocation?: string, newNotes?: string, newStartDate?: Date, newEndDate?: Date, filterOptions?: CalendarOptions, newOptions?: CalendarOptions): Promise<any>;\r\n    /**\r\n     * Delete an event.\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @return Returns a Promise\r\n     */\r\n    deleteEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;\r\n    /**\r\n     * Delete an event from the specified Calendar. (iOS only)\r\n     *\r\n     * @param {string} [title]  The event title\r\n     * @param {string} [location]  The event location\r\n     * @param {string} [notes]  The event notes\r\n     * @param {Date} [startDate]  The event start date\r\n     * @param {Date} [endDate]  The event end date\r\n     * @param {string} calendarName\r\n     * @return Returns a Promise\r\n     */\r\n    deleteEventFromNamedCalendar(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, calendarName?: string): Promise<any>;\r\n    /**\r\n     * Delete an event by id.\r\n     *\r\n     * @param {string} [id]  The event id\r\n     * @param {Date} [fromDate]  The date where it start deleting from\r\n     * @return Returns a Promise\r\n     */\r\n    deleteEventById(id: string, fromDate?: Date): Promise<any>;\r\n    /**\r\n     * Open the calendar at the specified date.\r\n     * @param {Date} date The date you want to open the calendar on\r\n     * @return {Promise<any>} Promise returns a promise\r\n     */\r\n    openCalendar(date: Date): Promise<any>;\r\n}\r\n"]}